from fractions import Fraction
import math

class Ingredient:
    # ingre = [{'铁块': 1}, {'铁矿': 1}, 1, '冶炼设备']
    def __init__(self, output, ingre):
        time = ingre[2]
        self.output = ingre[0][output]  # 一组输入产生几个输出
        self.output_num = Fraction(60, time) * ingre[0][output]      # 一个设备一分钟输出多少
        self.need =  ingre[1]           # 一个产物需要输入各多少
        self.side = {}            # 生成一个产物,有多少副产物
        for k, v in ingre[0].items():
            if k != output:
                self.side[k] = self.side.get(k, 0) + v
        self.equip_name = ingre[3]              # 啥设备


class IngredientManager:

    def __init__(self, ingredients):
        self.items = {}
        for ingre in ingredients:
            for output in ingre[0]:
                self.items[output] = Ingredient(output, ingre)

    # want = [['黄块', 60], ['红块', 40]]
    # need = {'铁块': [60, 10],}, 后面数字是需要设备数
    def _get_need(self, want, cache, need):
        w, num = want
        # 先从缓存里扣
        if w in cache:
            # print(cache)
            if cache[w] >= num:
                # 缓存充足
                cache[w] -= num
                return
            else:
                num -= cache[w]
                cache[w] = 0
        
        ingre = self.items[w]
        equip = math.ceil(Fraction(num, ingre.output_num))
        real_num = equip * ingre.output_num
        # 主产物缓存
        cache[w] = cache.get(w, 0) + real_num - num
        # 副产物缓存
        for s, n in ingre.side.items():
            cache[s] = cache.get(s, 0) + n * num
        # 处理总need表
        need[w] = need.get(w, [0, 0])
        need[w][0] += int(real_num)
        need[w][1] += int(equip)
        
        # 处理需求(递归)
        for k, v in ingre.need.items():
            self._get_need([k, v * Fraction(real_num, ingre.output)], cache, need)
            
    def get_need(self, wants):
        need = {}
        cache = {}
        # 获取需求
        for want in wants:
            self._get_need(want, cache, need)
        for k in need:
            need[k].append(self.items[k].equip_name)
        return need


if __name__ == '__main__':

    ingredients = [
        [{'铁': 1}, {}, 1, '直接开采'],
        [{'铜': 1}, {}, 1, '直接开采'],
        [{'硅': 1}, {}, 1, '直接开采'],
        [{'钛': 1}, {}, 1, '直接开采'],
        [{'煤': 1}, {}, 1, '直接开采'],
        [{'原油': 1}, {}, 1, '直接开采'],
        [{'石头': 1}, {}, 1, '直接开采'],
        [{'水': 1}, {}, 1, '直接开采'],
        [{'铁块': 1}, {'铁': 1}, 1, '冶炼设备'],
        [{'铜块': 1}, {'铜': 1}, 1, '冶炼设备'],
        [{'硅块': 1}, {'硅': 2}, 2, '冶炼设备'],
        [{'钛块': 1}, {'钛': 2}, 2, '冶炼设备'],
        [{'石材': 1}, {'石头': 1}, 1, '冶炼设备'],
        [{'石墨': 1}, {'煤': 2}, 2, '冶炼设备'],
        [{'氢': 1, '精炼油': 2}, {'原油': 2}, 4, '精炼设备'],
        [{'塑料': 1}, {'精炼油': 2, '石墨': 1}, 3, '化工设备'],
        [{'石墨烯': 2}, {'硫酸': 1, '石墨': 3}, 3, '化工设备'],
        [{'磁铁': 1}, {'铁': 1}, Fraction(3, 2), '冶炼设备'],
        [{'磁线圈': 2}, {'磁铁': 2, '铜块': 1}, 1, '制造台'],
        [{'晶格硅': 1}, {'硅块': 1}, 2, '冶炼设备'],
        [{'钛合金': 4}, {'钛块': 4, '钢': 4, '硫酸': 8}, 12, '冶炼设备'],
        [{'玻璃': 1}, {'石头': 2}, 2, '冶炼设备'],
        [{'金刚石': 1}, {'石墨': 1}, 2, '冶炼设备'],
        [{'有机晶体': 1}, {'塑料': 2, '精炼油': 1, '水': 1}, 6, '化工设备'],
        [{'液氢燃料棒': 1}, {'钛块': 1, '氢': 5}, 3, '制造台'],
        [{'氘核燃料棒': 1}, {'钛合金': 1, '重氢': 10, '超级磁场环': 1}, 6, '制造台'],
        [{'钢': 1}, {'铁块': 3}, 3, '冶炼设备'],
        [{'电动机': 1}, {'铁块': 2, '齿轮': 1, '磁线圈': 1}, 2, '制造台'],
        [{'钛化玻璃': 2}, {'玻璃': 2, '钛块': 2, '水': 2}, 5, '制造台'],
        [{'棱镜': 2}, {'玻璃': 3}, 2, '制造台'],
        [{'钛晶石': 1}, {'有机晶体': 1, '钛块': 3}, 4, '制造台'],
        [{'推进器': 1}, {'钢': 2, '铜块': 3}, 4, '制造台'],
        [{'加力推进器': 1}, {'钛合金': 5, '涡轮': 5}, 1, '制造台'],
        [{'奇异物质': 1}, {'粒子容器': 2, '铁块': 2, '重氢': 10}, 1, '粒子对撞机'],
        [{'齿轮': 1}, {'铁块': 1}, 1, '制造台'],
        [{'涡轮': 1}, {'电动机': 2, '磁线圈': 2}, 2, '制造台'],
        [{'电路板': 2}, {'铁块': 2, '铜块': 1}, 1, '制造台'],
        [{'引力透镜': 1}, {'金刚石': 4, '奇异物质': 1}, 6, '制造台'],
        [{'硫酸': 4}, {'精炼油': 6, '石头': 8, '水': 4}, 6, '化工设备'],
        [{'碳纳米管': 2}, {'石墨烯': 3, '钛块': 1}, 4, '化工设备'],
        [{'物流运输机': 1}, {'铁块': 5, '处理器': 2, '推进器': 2}, 4, '制造台'],
        [{'星际物流运输船': 1}, {'钛合金': 10, '处理器': 10, '加力推进器': 2}, 6, '制造台'],
        [{'电浆激发器': 1}, {'磁线圈': 4, '棱镜': 2}, 2, '制造台'],
        [{'超级磁场环': 1}, {'涡轮': 2, '磁铁': 3, '石墨': 1}, 3, '制造台'],
        [{'粒子宽带': 1}, {'碳纳米管': 2, '晶格硅': 2, '塑料': 1}, 8, '制造台'],
        [{'处理器': 1}, {'电路板': 2, '微晶元件': 2}, 3, '制造台'],
        [{'卡西米尔晶体': 1}, {'钛晶石': 1, '石墨烯': 2, '氢': 12}, 4, '制造台'],
        [{'粒子容器': 1}, {'涡轮': 2, '铜块': 2, '石墨烯': 2}, 1, '制造台'],
        [{'空间翘曲器': 1}, {'引力透镜': 1}, 10, '制造台'],
        [{'太阳帆': 2}, {'石墨烯': 1, '光子合并器': 1}, 4, '制造台'],
        [{'框架材料': 1}, {'碳纳米管': 4, '钛合金': 1, '硅块': 1}, 6, '制造台'],
        [{'戴森球组件': 1}, {'框架材料': 3, '太阳帆': 3, '处理器': 3}, 8, '制造台'],
        [{'光子合并器': 1}, {'棱镜': 2, '电路板': 1}, 3, '制造台'],
        [{'微晶元件': 1}, {'硅块': 2, '铜块': 1}, 2, '制造台'],
        [{'蓝块': 1}, {'磁线圈': 1, '电路板': 1}, 3, '科研设备'],
        [{'红块': 1}, {'石墨': 2, '氢': 2}, 6, '科研设备'],
        [{'黄块': 1}, {'金刚石': 1, '钛晶石': 1}, 8, '科研设备'],
        [{'紫块': 1}, {'处理器': 2, '粒子宽带': 1}, 10, '科研设备'],
    ]

    want = [
        ['蓝块', 20], 
        ['红块', 20], 
        ['黄块', 20], 
        ['紫块', 20], 
        ['戴森球组件', 1], 
        ['物流运输机', 1], 
        #['星际物流运输船', 10],
    ]
    
    im = IngredientManager(ingredients)
    need = im.get_need(want)
    
    # 输出: '精炼油: 20ips, 2精炼设备\n'
    for k, v in need.items():
        if v[2] == '直接开采':
            print('你需要开采【%s】每分钟 %d 个！太难了！' % (k, v[0]))
        else:
            print('你需要【%s】每分钟整 %d 个，要做%d个%s！' % (k, *v))
    #print(need)
